import type { TransactionArgs, TransactionType } from '../types/requests';
export declare function signTransaction<Type extends TransactionType>(type: Type, transactionArgs: TransactionArgs[Type]['params']): Promise<string | null>;
export declare function sendTransaction(encodedTransaction: string): Promise<string | null>;
export declare function getTransaction(encodedTransaction: string): Promise<import("..").TransactionResult | null>;
export declare function signAndSendTransaction<Type extends TransactionType>(type: Type, transactionArgs: TransactionArgs[Type]['params']): Promise<string | null>;
export declare function watchTransaction(transactionSignature: string, callback: (params: unknown) => void): Promise<(() => void) | null>;
export declare function getFeeForMessage<Type extends TransactionType>(type: Type, transactionArgs: TransactionArgs[Type]['params']): Promise<number | null>;
export declare function getBlock(blockSlot: number): Promise<import("../types/block").BlockResult | null>;
