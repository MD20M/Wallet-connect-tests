import type { Connector } from '../connectors/base';
import type { Cluster } from '../types/cluster';
export interface StoreConfig {
    /**
     * List of connectors to be supported. a specific connector is chosen using
     * `connectorName`. Eg: `[new PhantomConnector()]`
     */
    connectors: Connector[];
    /**
     *  Name of the chosen connector from the `connectors` supplied.
     *  Can be accessed by statically getting the connector name,
     *  E.g: `WalletConnectConnector.connectorName`
     */
    connectorName: string;
    /**
     * Chosen cluster/network to communicate with. Options are exported. Eg:
     * `mainnetBetaWalletConnect` which will communicate with the Solana mainnet
     * using WalletConnect's RPC
     */
    chosenCluster: Cluster;
}
export declare function getNewRequestId(): number;
export declare function setAddress(address: string): void;
export declare function getAddress(): string | undefined;
export declare function setConnectorName(connectorId: string): void;
export declare function getConnecterId(): string;
export declare function getActiveConnector(): Connector;
export declare function getConnectorIsAvailable(name: string): boolean;
export declare function setCluster(cluster: Cluster): void;
export declare function watchCluster(callback: (clusterName: Cluster) => void): () => void;
export declare function watchAddress(callback: (address?: string) => void): () => void;
export declare function getCluster(): Cluster;
export declare function getSocket(): WebSocket | undefined;
export declare function setSocket(socket: WebSocket): void;
export declare function setProjectId(projectId: string): void;
export declare function getProjectId(): string;
export declare function getConnectors(): Connector[];
export declare function initStore(config: StoreConfig): void;
