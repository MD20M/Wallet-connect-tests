import type { TransactionArgs, TransactionType } from '../types/requests';
import type { Connector } from './base';
import { BaseConnector } from './base';
export interface PhantomPublicKey {
    length: number;
    negative: number;
    words: Uint8Array;
    toString: () => string;
}
export declare class InjectedConnector extends BaseConnector implements Connector {
    injectedWalletPath: string;
    constructor(injectedWallet: string);
    static connectorName(walletName: string): string;
    getConnectorName(): string;
    disconnect(): Promise<void>;
    protected getProvider(): Promise<any>;
    isAvailable(): boolean;
    connect(): Promise<any>;
    signMessage(message: string): Promise<string>;
    signTransaction<Type extends TransactionType>(type: Type, params: TransactionArgs[Type]['params']): Promise<string>;
    signAndSendTransaction<Type extends TransactionType>(type: Type, params: TransactionArgs[Type]['params']): Promise<string>;
}
