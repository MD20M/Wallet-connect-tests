import type UniversalProvider from '@walletconnect/universal-provider';
import type { Connector } from './base';
import { BaseConnector } from './base';
import type { TransactionArgs, TransactionType } from '../types/requests';
export interface WalletConnectAppMetadata {
    name: string;
    description: string;
    url: string;
    icons: string[];
}
export declare class WalletConnectConnector extends BaseConnector implements Connector {
    protected provider: UniversalProvider | undefined;
    protected qrcode: boolean;
    constructor({ relayerRegion, metadata, qrcode, autoconnect }: {
        relayerRegion: string;
        metadata: WalletConnectAppMetadata;
        qrcode?: boolean;
        autoconnect?: boolean;
    });
    static readonly connectorName = "walletconnect";
    disconnect(): Promise<void>;
    getConnectorName(): string;
    isAvailable(): boolean;
    protected getProvider(): Promise<UniversalProvider>;
    signMessage(message: string): Promise<string>;
    signTransaction<Type extends keyof TransactionArgs>(type: Type, params: TransactionArgs[Type]['params']): Promise<string>;
    signAndSendTransaction<Type extends TransactionType>(type: Type, params: TransactionArgs[Type]['params']): Promise<string>;
    /**
     * Connect to user's wallet.
     *
     * If `WalletConnectConnector` was configured with `qrcode = true`, this will
     * open a QRCodeModal, where the user will scan the qrcode and then this
     * function will resolve/return the address of the wallet.
     *
     * If `qrcode = false`, this will return the pairing URI used to generate the
     * QRCode.
     */
    connect(): Promise<string>;
}
